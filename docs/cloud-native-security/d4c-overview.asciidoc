[[d4c-overview]]
= Container workload protection

Elastic Container Workload Protection (CWP) provides cloud-native runtime protections for containerized environments by identifying and optionally blocking unexpected system behavior in Kubernetes containers.

[[d4c-use-cases]]
[discrete]
== Use cases

*Threat detection & threat hunting*
CWP sends system events from your containers to {es}. {elastic-sec}'s prebuilt security rules include many designed to detect malicious behaviors in container runtimes. These can help you detect behaviors that should never take place in containers, such as reverse shell executions, privilege escalation, container escape attempts, and more.
//Threat detection and hunting workflows work seamlessly with CWP to enable security analysts

*Drift detection & prevention*
Cloud-native containers should be immutable, meaning that their file systems should not change during normal operations. By leveraging this principle, security teams can detect unusual system behavior with a high degree of accuracy — without relying on more resource-intensive techniques like memory scanning or attack signature detection. Elastic’s Drift Detection mechanism has a low rate of false positives, so you can deploy it in most environments without worrying about creating excessive alerts.

*Workload protection policies*
CWP uses a powerful policy language to restrict container workloads to a set of allowlisted capabilities chosen by you. When employed with Drift and Threat Detection, this can provide multiple layers of defense.

*Feature Compatibility Matrix*
[options="header"]
|===
| | EKS 1.24-1.26 (AL2022) | GKE 1.24-1.26 (COS)
| Process event exports | ✓ | ✓
| Network event exports | ✓ | ✓
| File event exports | ✓ | ✓
| File blocking | ✓ | ✓
| Process blocking | Coming Soon | Coming Soon
| Network blocking | ✗ | ✗
| Drift prevention | ✓ | ✓
| Mount point awareness | ✓ | ✓
|===

[discrete]
== How D4C works
D4C uses a lightweight integration, `cloud-defend`. When you deploy it, the integration gets bundled with and configured by {agent}. The {agent} gets installed as a DaemonSet on your Kubernetes clusters, enabling the integration to use eBPF LSM and tracepoint probes to record system events. Events are evaluated against eBPF LSM hook points, enabling {agent} to evaluate system activity against your policy before allowing it to proceed.

Your policy determines which system behaviors (for example process execution, or file creation or deletion) will result in which action(s). Each policy is defined by a selector and a response.  Selectors define which conditions should cause the specified response to run. Responses can include multiple actions, such as `log`, `alert`, or `block`.

IMPORTANT: To learn more about D4C policies, including how to create your own, refer to the <<d4c-policy-guide, D4C policies guide>>.
