[[d4c-policy-guide]]
= Guide to D4C policies

To unlock the full functionality of D4C, you'll need to understand its policy syntax, which enables you to construct policies that precisely allow expected container behaviors and prevent unexpected behaviors â€“ thereby hardening the security posture of your container workloads.

Policies consist of _Selectors_ and responses. A given policy must contain at least one selector and one response. Currently, the system supports two types of selectors and responses: `file` and `process`.
Selectors define which system operations to match, and can include multiple conditions (grouped using a logical `AND`) to precisely select events. Responses define which actions to take when a system operation matches the conditions specified in the associated selector.

[[d4c-default-policies]]
[discrete]
== Default policies:
By default, the D4C integration includes two policies. They are designed to implement core CWP capabilities:

- *Threat Detection:* The first default policy is designed to stream process telemetry events to your {es} cluster, so that the {elastic-sec} SIEM can evaluate it to detect threats. It is called `allProcesses`, and selects all fork and exec events. It is mapped to a response called `allProcesses`, which specifies that the selected events should be logged.
- *Drift Detection & Prevention:* The second default policy is designed to create alerts when container drift is detected. It is called `executableChanges`, and selects all `createExecutable` and `modifyExecutable` events. It is mapped to a response called `executableChanges`, which specifies that the selected events should create alerts, which will be sent to your {es} cluster. This policy can also be modified to block drift operations by changing the response action to block.



*Selectors in policy*
Selectors define which system operations will be matched on. To enable this, the system has a number of conditions that can be grouped together (using a logical AND operation) to provide precise control.

A selector MUST contain a name and at least one of the conditions. Conditions define which operations to match. If an operation condition is not specified, all operations will be matched.
