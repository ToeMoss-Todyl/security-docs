[[Kubernetes-dashboard]]
= The Kubernetes dashboard: Linux session data from your Kubernetes clusters

This page explains how to deploy a https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/[daemonset] to collect session data from your Kubernetes clusters using the Endpoint and Cloud Security integration, and how to view that data in Kibana’s Kubernetes dashboard.

**Prerequisites**: This feature requires Elastic Stack version 8.4 or higher. Your Elastic deployment must have the Endpoint and Cloud Security integration enabled, and you need an active Fleet Server.

**Support Matrix**: This feature is currently available on GKE and EKS using Linux hosts and Kubernetes versions that match the following specifications:
|=====================
| | **Kubernetes versions** | **Container runtime** | **Nose OSes**
|**EKS**| 1.18; 1.19; 1.20; 1.21| Docker | Amazon Linux 2, Bottlerocket OS
|**GKE**| Regular (default channel): 1.21 and 1.22; Stable: 1.20 and 1.21; Rapid: 1.22 and 1.23 | containerd | Container-optimized OS (COS), Ubuntu
|=====================
You first need to download the daemonset manifest .yaml, then modify it to include your Fleet URL and Enrollment Token before you deploy it to the clusters you want to monitor. After that, your data will appear in the Kubernetes dashboard.

[discrete]
== Download and modify the daemonset manifest
The daemonset integrates Elastic Endpoint into your Kubernetes cluster. The Elastic Agent is enrolled to a running Fleet Server using the `FLEET_URL` parameter, and connected to a specific Elastic Agent policy using the `FLEET_ENROLLMENT_TOKEN`.

1. Download the daemonset manifest http://github.com/elastic/placeholder[here] for GKE and http://github.com/elastic/placeholder[here] for EKS.
2. In the manifest, fill in the `FLEET_URL` field with your Fleet URL. If you’re not sure how to find it, refer to https://www.elastic.co/guide/en/fleet/current/fleet-settings.html[Fleet UI settings].
3. In the manifest, fill in the `FLEET_ENROLLMENT_TOKEN` field with your Fleet enrollment token. If you don’t have one or you’re not sure how to find it, refer to https://www.elastic.co/guide/en/fleet/master/fleet-enrollment-tokens.html[Fleet enrollment tokens].

IMPORTANT: The Elastic Agent policy you use must include the Endpoint and Cloud Security integration, and must have `Include session data` set to `true`. To modify this setting, go to **Security > Manage > Policies**, select your policy, and find `Include session data` near the bottom of the `Policy settings` tab:

image::session-data-config.png[the "Enable session data" setting on the Policy settings page]


[discrete]
== Apply the modified manifest to your cluster or clusters
First, to ensure you install Endpoint on the desired k8s cluster(s), use `kubectl config use-context <name-of-context>` to set the default context. You can repeat the following process for multiple contexts.

NOTE: To check which contexts exist, use `kubectl config get-contexts` to list them from your local kubectl config file. An asterisk, if present, indicates the current default context.

To apply the manifest to a cluster, run for example: `kubectl apply -f eks-elastic-security.yaml` for EKS, or `kubectl apply -f gke-elastic-security.yaml` for GKE.

To check the daemonset’s status, run for example: `kubectl get pods -A`

Once the daemonset is running, Elastic Endpoint will start sending Linux session data from Kubernetes to Kibana. You can then view that data using the Kubernetes dashboard.

[discrete]
== The Kubernetes dashboard
To find the dashboard, go to **Security > Dashboards > Kubernetes**.

image::kubernetes-dashboard.png[the Kubernetes dashboard, with numbered labels 1 through 3 for major sections]
Sections numbered above are described below:

  1. The charts at the top of the dashboard provide an overview of your monitored Kubernetes infrastructure. You can hide them by clicking Hide charts.
  2. The Tree navigation menu allows you to navigate through your deployments and select the scope of the Sessions table to the right. You can select any item in the menu to show its sessions. In Logical view, the menu is organized by Cluster, Namespace, Pod, and Container image. In Infrastructure view, it is organized by Cluster, Node, Pod, and Container image.
  3. The sessions table displays sessions collected from the selected element of your Kubernetes infrastructure. You can view it in fullscreen by selecting the button in its upper right corner, and sort it by any of its fields.

You can filter the data using the KQL search bar and date picker at the top of the page, and take the following investigative actions on sessions in the sessions table using the buttons to their left:

- View details
- Open in https://www.elastic.co/guide/en/security/current/timelines-ui.html[timeline]
- Run https://www.elastic.co/guide/en/kibana/master/osquery.html[Osquery]
- https://www.elastic.co/guide/en/security/current/visual-event-analyzer.html[Analyze] event
- Open https://www.elastic.co/guide/en/security/current/session-view.html[Session View]

== Kubernetes-specific data in Session view

Session view displays Kubernetes-specific metadata under the Metadata tab of the Detail panel:

image::metadata-tab.png[the Detail panel's metadata tab]

The metadata tab is organized into four expandable sections:

- `Metadata` includes the fields `hostname`, `id`, `ip`, `mac`, and `name`, as well as information about the Host OS.
- `Cloud` includes the fields `instance.name`, `provider`, `region`, `account.id`, and `project.id`.
- `Container` includes the fields `id`, `name`, `image.name`, `image.tag`, and `image.hash.all`.
- `Orchestrator` includes the fields `resource.ip`, `resource.name`, `resource.type`, `namespace`, `cluster.id`, `cluster.name`, and `parent.type`.
